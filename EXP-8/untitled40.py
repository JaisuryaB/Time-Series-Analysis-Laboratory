# -*- coding: utf-8 -*-
"""Untitled40.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w07ni1bp21FvYirZj8x4K8379Z52q56B
"""

import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error

# Load the dataset
df = pd.read_csv('/content/gold_data (1).csv')  # replace with correct path
gold_prices = df['Price']

# 1. ADF Test - Check stationarity
result = adfuller(gold_prices.dropna())
print('ADF Statistic:', result[0])
print('p-value:', result[1])

# 2. Differencing if needed
if result[1] > 0.05:
    gold_prices_diff = gold_prices.diff().dropna()
    print("Data differenced to achieve stationarity.")
else:
    gold_prices_diff = gold_prices.copy()
    print("Data is already stationary.")

# 3. ARIMA Model Selection
p, d, q = 1, 1, 1  # starting simple (can tune later)

# 4. Model Training
model = ARIMA(gold_prices_diff, order=(p,d,q))
model_fit = model.fit()
print(model_fit.summary())

# 5. Forecasting - Predict next 30 days
forecast_steps = 30
forecast = model_fit.forecast(steps=forecast_steps)

# Reverse differencing
last_value = gold_prices.iloc[-1]
forecast_cumsum = forecast.cumsum() + last_value

# 6. Visualization
plt.figure(figsize=(14,7))
plt.plot(gold_prices.index, gold_prices, label='Actual Gold Price')
future_dates = pd.date_range(start=pd.to_datetime(gold_prices.index[-1]), periods=forecast_steps+1, freq='D')[1:]
plt.plot(future_dates, forecast_cumsum, label='Forecasted Gold Price', color='red')
plt.title('Gold Price Forecast (Next 30 Days)')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.grid()
plt.show()

# Evaluate if you want (Optional)
# We don't have future actual prices yet, so evaluation is skipped here